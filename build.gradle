buildscript {
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = "com.github.instagram"
version = 0.7

task wrapper(type: Wrapper) {
       gradleVersion = '3.3' //version required
}

subprojects {
  repositories {
    mavenCentral()
  }
}

allprojects {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

task processorJar(type: Jar,
        dependsOn:["javawriter:build","common:build","util:build","processor:build"]) {
    from files( { project(':javawriter').sourceSets.main.output.classesDir } )
    from files( { project(':common').sourceSets.main.output.classesDir } )
    from files( { project(':util').sourceSets.main.output.classesDir } )
    from files( { project(':processor').sourceSets.main.output.classesDir } )
    from files( { project(':processor').sourceSets.main.output.resourcesDir } )
    baseName 'processor'
}

task runtimeJar(type: Jar,
        dependsOn: "common:build") {
    from files( { project(':common').sourceSets.main.output.classesDir } )
    baseName 'runtime'
}

task runtimeSourcesJar(type: Jar) {
    classifier = 'sources'
    baseName 'runtime'
    from files( { project(':common').sourceSets.main.allJava } )
}

task processorSourcesJar(type: Jar) {
    classifier = 'sources'
    baseName 'processor'
    from files( { project(':javawriter').sourceSets.main.allJava } )
    from files( { project(':common').sourceSets.main.allJava } )
    from files( { project(':util').sourceSets.main.allJava } )
    from files( { project(':processor').sourceSets.main.allJava } )
}

task runtimeJavadoc(type: Javadoc) {
    source files( { project(':common').sourceSets.main.allJava } )
    destinationDir = new File("${project.docsDir}", "runtime-javadoc")
}

task runtimeJavadocJar(type: Jar, dependsOn: runtimeJavadoc) {
    classifier = 'javadoc'
    baseName 'runtime'
    from runtimeJavadoc.destinationDir
}

task processorJavadoc(type: Javadoc) {
    source files( { project(':javawriter').sourceSets.main.allJava } )
    source files( { project(':common').sourceSets.main.allJava } )
    source files( { project(':util').sourceSets.main.allJava } )
    source files( { project(':processor').sourceSets.main.allJava } )
    destinationDir = new File("${project.docsDir}", "processor-javadoc")
    classpath += files({ project(':common').sourceSets.main.compileClasspath })
    classpath += files({ project(':processor').sourceSets.main.compileClasspath })
    classpath += files({ project(':util').sourceSets.main.compileClasspath })
}

task processorJavadocJar(type: Jar, dependsOn: processorJavadoc) {
    classifier = 'javadoc'
    baseName 'processor'
    from processorJavadoc.destinationDir
}

artifacts {
    archives processorJar
    archives runtimeJar
    archives runtimeSourcesJar
    archives processorSourcesJar
    archives runtimeJavadocJar
    archives processorJavadocJar
}

install {
    repositories.mavenInstaller {
        addFilter('processor') { artifact, file -> artifact.name.contains('processor') }
        pom("processor").withXml {
            def dependenciesNode = asNode().appendNode('dependencies')
            project(":processor").configurations.compile.allDependencies.findAll {
                it.group != project(":processor").group // filter out local modules
            } .each {
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', it.group)
                dependencyNode.appendNode('artifactId', it.name)
                dependencyNode.appendNode('version', it.version)
            }
        }
        addFilter('runtime') { artifact, file -> artifact.name.contains('runtime') }
        pom("runtime").withXml {
            def dependenciesNode = asNode().appendNode('dependencies')
            project(":common").configurations.compile.allDependencies.findAll {
                it.group != project(":common").group // filter out local modules
            } .each {
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', it.group)
                dependencyNode.appendNode('artifactId', it.name)
                dependencyNode.appendNode('version', it.version)
            }
        }
    }
}
